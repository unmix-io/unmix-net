# Dockerfile based on https://github.com/unlhcc/singularity-dockerfiles/blob/master/tensorflow-gpu/Dockerfile

# Start with Ubuntu base image
FROM ubuntu:18.04

# Install wget and build-essential
RUN apt-get update && apt-get install -y \
  build-essential \
  wget vim  module-init-tools

RUN cd /tmp && \
    # Download run file
    wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run -o /dev/null && \
    # The driver version must match exactly what's installed on the GPU nodes, so install it separately
    wget http://us.download.nvidia.com/XFree86/Linux-x86_64/410.73/NVIDIA-Linux-x86_64-410.73.run -o /dev/null && \
    # Patches a'hoy!
    wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run \
    https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run \
    https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda_9.0.176.3_linux-run \
    https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/4/cuda_9.0.176.4_linux-run -o /dev/null && \
    # cuDNN library
    wget https://unl.box.com/shared/static/713e2o84g4yvjloyhor60bcyn40kjgnh.tgz -o /dev/null && \
    # Make the run file executable and extract
    chmod +x *-run NVIDIA-Linux-x86_64-410.73.run && ./cuda_9.0.176_384.81_linux-run -extract=`pwd` && \
    # Install CUDA drivers (silent, no kernel)
    ./NVIDIA-Linux-x86_64-410.73.run -s --no-kernel-module && \
    # Install toolkit (silent)
     ./cuda-linux.9.0.176-22781540.run -noprompt && \
    # Patches
    ./cuda_9.0.176.1_linux-run  --silent --accept-eula && \
    ./cuda_9.0.176.2_linux-run --silent --accept-eula && \
    ./cuda_9.0.176.3_linux-run --silent --accept-eula && \
    .//cuda_9.0.176.4_linux-run --silent --accept-eula && \
    # Install cuDNN
    tar -zxvf 713e2o84g4yvjloyhor60bcyn40kjgnh.tgz && \
    cp -a cuda/lib64/* /usr/local/cuda/lib64 && cp -a cuda/include/* /usr/local/cuda/include && \
    # Clean up
    rm -rf /tmp/cuda* /tmp/NVIDIA* /tmp/*.tgz

ENV PATH=/usr/local/cuda/bin:$PATH \
  LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \
  CUDA_HOME=/usr/local/cuda \
  LC_ALL=C

ADD cuda.conf /etc/ld.so.conf.d
RUN ldconfig -v
RUN mkdir /work

# Install both 2.7/3.5 version of Python and pip
RUN apt-get update && apt-get install -y software-properties-common
RUN apt-add-repository multiverse && apt-get update
RUN apt-get install -y libcupti-dev python-pip python-dev python3-dev python3-pip git

# Install TensorFlow (and friends) for both Python 2.7 and 3.5
RUN pip install tensorflow-gpu==1.12 numpy scipy 'matplotlib<3.0' pandas scikit-learn scikit-image
RUN pip3 install tensorflow-gpu==1.12 numpy scipy matplotlib pandas scikit-learn scikit-image

RUN pip install scipy pyyaml h5py matplotlib pandas scikit-learn scikit-image keras==2.2.4 librosa commentjson psutil gitpython colorama progressbar2 && \
    pip3 install scipy pyyaml h5py matplotlib pandas scikit-learn scikit-image keras==2.2.4 librosa commentjson psutil gitpython colorama progressbar2

# To publish this Dockerfile, run (in the same directory as this file):
# docker login --username=yourhubusername --email=youremail@provider.com
# docker build -t unmix .
# docker images # list all available images
# docker run unmix # see if unmix image works

# Note the id in the docker images command, then run
# docker tag [id] unmix/unmix:latest
# docker push unmix/unmix

# Then build the .simg image using:
# singularity build unmix.simg Singularity
# or directly without the Singularity file: singularity build unmix.simg docker://unmix/unmix:latest